# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MonsterAbilityScores(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, strength: int=None, dexterity: int=None, constitution: int=None, intelligence: int=None, wisdom: int=None, charisma: int=None):  # noqa: E501
        """MonsterAbilityScores - a model defined in Swagger

        :param strength: The strength of this MonsterAbilityScores.  # noqa: E501
        :type strength: int
        :param dexterity: The dexterity of this MonsterAbilityScores.  # noqa: E501
        :type dexterity: int
        :param constitution: The constitution of this MonsterAbilityScores.  # noqa: E501
        :type constitution: int
        :param intelligence: The intelligence of this MonsterAbilityScores.  # noqa: E501
        :type intelligence: int
        :param wisdom: The wisdom of this MonsterAbilityScores.  # noqa: E501
        :type wisdom: int
        :param charisma: The charisma of this MonsterAbilityScores.  # noqa: E501
        :type charisma: int
        """
        self.swagger_types = {
            'strength': int,
            'dexterity': int,
            'constitution': int,
            'intelligence': int,
            'wisdom': int,
            'charisma': int
        }

        self.attribute_map = {
            'strength': 'strength',
            'dexterity': 'dexterity',
            'constitution': 'constitution',
            'intelligence': 'intelligence',
            'wisdom': 'wisdom',
            'charisma': 'charisma'
        }
        self._strength = strength
        self._dexterity = dexterity
        self._constitution = constitution
        self._intelligence = intelligence
        self._wisdom = wisdom
        self._charisma = charisma

    @classmethod
    def from_dict(cls, dikt) -> 'MonsterAbilityScores':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Monster_abilityScores of this MonsterAbilityScores.  # noqa: E501
        :rtype: MonsterAbilityScores
        """
        return util.deserialize_model(dikt, cls)

    @property
    def strength(self) -> int:
        """Gets the strength of this MonsterAbilityScores.


        :return: The strength of this MonsterAbilityScores.
        :rtype: int
        """
        return self._strength

    @strength.setter
    def strength(self, strength: int):
        """Sets the strength of this MonsterAbilityScores.


        :param strength: The strength of this MonsterAbilityScores.
        :type strength: int
        """

        self._strength = strength

    @property
    def dexterity(self) -> int:
        """Gets the dexterity of this MonsterAbilityScores.


        :return: The dexterity of this MonsterAbilityScores.
        :rtype: int
        """
        return self._dexterity

    @dexterity.setter
    def dexterity(self, dexterity: int):
        """Sets the dexterity of this MonsterAbilityScores.


        :param dexterity: The dexterity of this MonsterAbilityScores.
        :type dexterity: int
        """

        self._dexterity = dexterity

    @property
    def constitution(self) -> int:
        """Gets the constitution of this MonsterAbilityScores.


        :return: The constitution of this MonsterAbilityScores.
        :rtype: int
        """
        return self._constitution

    @constitution.setter
    def constitution(self, constitution: int):
        """Sets the constitution of this MonsterAbilityScores.


        :param constitution: The constitution of this MonsterAbilityScores.
        :type constitution: int
        """

        self._constitution = constitution

    @property
    def intelligence(self) -> int:
        """Gets the intelligence of this MonsterAbilityScores.


        :return: The intelligence of this MonsterAbilityScores.
        :rtype: int
        """
        return self._intelligence

    @intelligence.setter
    def intelligence(self, intelligence: int):
        """Sets the intelligence of this MonsterAbilityScores.


        :param intelligence: The intelligence of this MonsterAbilityScores.
        :type intelligence: int
        """

        self._intelligence = intelligence

    @property
    def wisdom(self) -> int:
        """Gets the wisdom of this MonsterAbilityScores.


        :return: The wisdom of this MonsterAbilityScores.
        :rtype: int
        """
        return self._wisdom

    @wisdom.setter
    def wisdom(self, wisdom: int):
        """Sets the wisdom of this MonsterAbilityScores.


        :param wisdom: The wisdom of this MonsterAbilityScores.
        :type wisdom: int
        """

        self._wisdom = wisdom

    @property
    def charisma(self) -> int:
        """Gets the charisma of this MonsterAbilityScores.


        :return: The charisma of this MonsterAbilityScores.
        :rtype: int
        """
        return self._charisma

    @charisma.setter
    def charisma(self, charisma: int):
        """Sets the charisma of this MonsterAbilityScores.


        :param charisma: The charisma of this MonsterAbilityScores.
        :type charisma: int
        """

        self._charisma = charisma
