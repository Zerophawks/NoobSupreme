# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Campaign(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title: str=None, storylines: List[str]=None, quests: List[str]=None, characters_involved: List[str]=None, npcs_involved: List[str]=None, locations: List[str]=None, maps: List[str]=None, session_logs: List[str]=None, outcomes: str=None):  # noqa: E501
        """Campaign - a model defined in Swagger

        :param title: The title of this Campaign.  # noqa: E501
        :type title: str
        :param storylines: The storylines of this Campaign.  # noqa: E501
        :type storylines: List[str]
        :param quests: The quests of this Campaign.  # noqa: E501
        :type quests: List[str]
        :param characters_involved: The characters_involved of this Campaign.  # noqa: E501
        :type characters_involved: List[str]
        :param npcs_involved: The npcs_involved of this Campaign.  # noqa: E501
        :type npcs_involved: List[str]
        :param locations: The locations of this Campaign.  # noqa: E501
        :type locations: List[str]
        :param maps: The maps of this Campaign.  # noqa: E501
        :type maps: List[str]
        :param session_logs: The session_logs of this Campaign.  # noqa: E501
        :type session_logs: List[str]
        :param outcomes: The outcomes of this Campaign.  # noqa: E501
        :type outcomes: str
        """
        self.swagger_types = {
            'title': str,
            'storylines': List[str],
            'quests': List[str],
            'characters_involved': List[str],
            'npcs_involved': List[str],
            'locations': List[str],
            'maps': List[str],
            'session_logs': List[str],
            'outcomes': str
        }

        self.attribute_map = {
            'title': 'title',
            'storylines': 'storylines',
            'quests': 'quests',
            'characters_involved': 'charactersInvolved',
            'npcs_involved': 'npcsInvolved',
            'locations': 'locations',
            'maps': 'maps',
            'session_logs': 'sessionLogs',
            'outcomes': 'outcomes'
        }
        self._title = title
        self._storylines = storylines
        self._quests = quests
        self._characters_involved = characters_involved
        self._npcs_involved = npcs_involved
        self._locations = locations
        self._maps = maps
        self._session_logs = session_logs
        self._outcomes = outcomes

    @classmethod
    def from_dict(cls, dikt) -> 'Campaign':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Campaign of this Campaign.  # noqa: E501
        :rtype: Campaign
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this Campaign.


        :return: The title of this Campaign.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Campaign.


        :param title: The title of this Campaign.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def storylines(self) -> List[str]:
        """Gets the storylines of this Campaign.


        :return: The storylines of this Campaign.
        :rtype: List[str]
        """
        return self._storylines

    @storylines.setter
    def storylines(self, storylines: List[str]):
        """Sets the storylines of this Campaign.


        :param storylines: The storylines of this Campaign.
        :type storylines: List[str]
        """
        if storylines is None:
            raise ValueError("Invalid value for `storylines`, must not be `None`")  # noqa: E501

        self._storylines = storylines

    @property
    def quests(self) -> List[str]:
        """Gets the quests of this Campaign.


        :return: The quests of this Campaign.
        :rtype: List[str]
        """
        return self._quests

    @quests.setter
    def quests(self, quests: List[str]):
        """Sets the quests of this Campaign.


        :param quests: The quests of this Campaign.
        :type quests: List[str]
        """
        if quests is None:
            raise ValueError("Invalid value for `quests`, must not be `None`")  # noqa: E501

        self._quests = quests

    @property
    def characters_involved(self) -> List[str]:
        """Gets the characters_involved of this Campaign.


        :return: The characters_involved of this Campaign.
        :rtype: List[str]
        """
        return self._characters_involved

    @characters_involved.setter
    def characters_involved(self, characters_involved: List[str]):
        """Sets the characters_involved of this Campaign.


        :param characters_involved: The characters_involved of this Campaign.
        :type characters_involved: List[str]
        """

        self._characters_involved = characters_involved

    @property
    def npcs_involved(self) -> List[str]:
        """Gets the npcs_involved of this Campaign.


        :return: The npcs_involved of this Campaign.
        :rtype: List[str]
        """
        return self._npcs_involved

    @npcs_involved.setter
    def npcs_involved(self, npcs_involved: List[str]):
        """Sets the npcs_involved of this Campaign.


        :param npcs_involved: The npcs_involved of this Campaign.
        :type npcs_involved: List[str]
        """

        self._npcs_involved = npcs_involved

    @property
    def locations(self) -> List[str]:
        """Gets the locations of this Campaign.


        :return: The locations of this Campaign.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations: List[str]):
        """Sets the locations of this Campaign.


        :param locations: The locations of this Campaign.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def maps(self) -> List[str]:
        """Gets the maps of this Campaign.


        :return: The maps of this Campaign.
        :rtype: List[str]
        """
        return self._maps

    @maps.setter
    def maps(self, maps: List[str]):
        """Sets the maps of this Campaign.


        :param maps: The maps of this Campaign.
        :type maps: List[str]
        """

        self._maps = maps

    @property
    def session_logs(self) -> List[str]:
        """Gets the session_logs of this Campaign.


        :return: The session_logs of this Campaign.
        :rtype: List[str]
        """
        return self._session_logs

    @session_logs.setter
    def session_logs(self, session_logs: List[str]):
        """Sets the session_logs of this Campaign.


        :param session_logs: The session_logs of this Campaign.
        :type session_logs: List[str]
        """

        self._session_logs = session_logs

    @property
    def outcomes(self) -> str:
        """Gets the outcomes of this Campaign.


        :return: The outcomes of this Campaign.
        :rtype: str
        """
        return self._outcomes

    @outcomes.setter
    def outcomes(self, outcomes: str):
        """Sets the outcomes of this Campaign.


        :param outcomes: The outcomes of this Campaign.
        :type outcomes: str
        """

        self._outcomes = outcomes
