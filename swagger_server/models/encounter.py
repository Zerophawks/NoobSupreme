# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.encounter_rewards import EncounterRewards  # noqa: F401,E501
from swagger_server import util


class Encounter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, difficulty_level: str=None, monsters: List[str]=None, terrain: str=None, environmental_factors: str=None, rewards: EncounterRewards=None):  # noqa: E501
        """Encounter - a model defined in Swagger

        :param name: The name of this Encounter.  # noqa: E501
        :type name: str
        :param difficulty_level: The difficulty_level of this Encounter.  # noqa: E501
        :type difficulty_level: str
        :param monsters: The monsters of this Encounter.  # noqa: E501
        :type monsters: List[str]
        :param terrain: The terrain of this Encounter.  # noqa: E501
        :type terrain: str
        :param environmental_factors: The environmental_factors of this Encounter.  # noqa: E501
        :type environmental_factors: str
        :param rewards: The rewards of this Encounter.  # noqa: E501
        :type rewards: EncounterRewards
        """
        self.swagger_types = {
            'name': str,
            'difficulty_level': str,
            'monsters': List[str],
            'terrain': str,
            'environmental_factors': str,
            'rewards': EncounterRewards
        }

        self.attribute_map = {
            'name': 'name',
            'difficulty_level': 'difficultyLevel',
            'monsters': 'monsters',
            'terrain': 'terrain',
            'environmental_factors': 'environmentalFactors',
            'rewards': 'rewards'
        }
        self._name = name
        self._difficulty_level = difficulty_level
        self._monsters = monsters
        self._terrain = terrain
        self._environmental_factors = environmental_factors
        self._rewards = rewards

    @classmethod
    def from_dict(cls, dikt) -> 'Encounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Encounter of this Encounter.  # noqa: E501
        :rtype: Encounter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Encounter.


        :return: The name of this Encounter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Encounter.


        :param name: The name of this Encounter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def difficulty_level(self) -> str:
        """Gets the difficulty_level of this Encounter.


        :return: The difficulty_level of this Encounter.
        :rtype: str
        """
        return self._difficulty_level

    @difficulty_level.setter
    def difficulty_level(self, difficulty_level: str):
        """Sets the difficulty_level of this Encounter.


        :param difficulty_level: The difficulty_level of this Encounter.
        :type difficulty_level: str
        """
        if difficulty_level is None:
            raise ValueError("Invalid value for `difficulty_level`, must not be `None`")  # noqa: E501

        self._difficulty_level = difficulty_level

    @property
    def monsters(self) -> List[str]:
        """Gets the monsters of this Encounter.


        :return: The monsters of this Encounter.
        :rtype: List[str]
        """
        return self._monsters

    @monsters.setter
    def monsters(self, monsters: List[str]):
        """Sets the monsters of this Encounter.


        :param monsters: The monsters of this Encounter.
        :type monsters: List[str]
        """
        if monsters is None:
            raise ValueError("Invalid value for `monsters`, must not be `None`")  # noqa: E501

        self._monsters = monsters

    @property
    def terrain(self) -> str:
        """Gets the terrain of this Encounter.


        :return: The terrain of this Encounter.
        :rtype: str
        """
        return self._terrain

    @terrain.setter
    def terrain(self, terrain: str):
        """Sets the terrain of this Encounter.


        :param terrain: The terrain of this Encounter.
        :type terrain: str
        """

        self._terrain = terrain

    @property
    def environmental_factors(self) -> str:
        """Gets the environmental_factors of this Encounter.


        :return: The environmental_factors of this Encounter.
        :rtype: str
        """
        return self._environmental_factors

    @environmental_factors.setter
    def environmental_factors(self, environmental_factors: str):
        """Sets the environmental_factors of this Encounter.


        :param environmental_factors: The environmental_factors of this Encounter.
        :type environmental_factors: str
        """

        self._environmental_factors = environmental_factors

    @property
    def rewards(self) -> EncounterRewards:
        """Gets the rewards of this Encounter.


        :return: The rewards of this Encounter.
        :rtype: EncounterRewards
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards: EncounterRewards):
        """Sets the rewards of this Encounter.


        :param rewards: The rewards of this Encounter.
        :type rewards: EncounterRewards
        """

        self._rewards = rewards
