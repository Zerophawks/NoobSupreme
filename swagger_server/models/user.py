# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.campaign import Campaign  # noqa: F401,E501
from swagger_server.models.character import Character  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, email: str=None, characters: List[Character]=None, campaigns: List[Campaign]=None):  # noqa: E501
        """User - a model defined in Swagger

        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param characters: The characters of this User.  # noqa: E501
        :type characters: List[Character]
        :param campaigns: The campaigns of this User.  # noqa: E501
        :type campaigns: List[Campaign]
        """
        self.swagger_types = {
            'username': str,
            'email': str,
            'characters': List[Character],
            'campaigns': List[Campaign]
        }

        self.attribute_map = {
            'username': 'username',
            'email': 'email',
            'characters': 'characters',
            'campaigns': 'campaigns'
        }
        self._username = username
        self._email = email
        self._characters = characters
        self._campaigns = campaigns

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def characters(self) -> List[Character]:
        """Gets the characters of this User.


        :return: The characters of this User.
        :rtype: List[Character]
        """
        return self._characters

    @characters.setter
    def characters(self, characters: List[Character]):
        """Sets the characters of this User.


        :param characters: The characters of this User.
        :type characters: List[Character]
        """

        self._characters = characters

    @property
    def campaigns(self) -> List[Campaign]:
        """Gets the campaigns of this User.


        :return: The campaigns of this User.
        :rtype: List[Campaign]
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns: List[Campaign]):
        """Sets the campaigns of this User.


        :param campaigns: The campaigns of this User.
        :type campaigns: List[Campaign]
        """

        self._campaigns = campaigns
