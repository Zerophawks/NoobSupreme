# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Spell(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, level: int=None, school: str=None, casting_time: str=None, range: str=None, components: str=None, duration: str=None, description: str=None):  # noqa: E501
        """Spell - a model defined in Swagger

        :param name: The name of this Spell.  # noqa: E501
        :type name: str
        :param level: The level of this Spell.  # noqa: E501
        :type level: int
        :param school: The school of this Spell.  # noqa: E501
        :type school: str
        :param casting_time: The casting_time of this Spell.  # noqa: E501
        :type casting_time: str
        :param range: The range of this Spell.  # noqa: E501
        :type range: str
        :param components: The components of this Spell.  # noqa: E501
        :type components: str
        :param duration: The duration of this Spell.  # noqa: E501
        :type duration: str
        :param description: The description of this Spell.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'name': str,
            'level': int,
            'school': str,
            'casting_time': str,
            'range': str,
            'components': str,
            'duration': str,
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'level': 'level',
            'school': 'school',
            'casting_time': 'castingTime',
            'range': 'range',
            'components': 'components',
            'duration': 'duration',
            'description': 'description'
        }
        self._name = name
        self._level = level
        self._school = school
        self._casting_time = casting_time
        self._range = range
        self._components = components
        self._duration = duration
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Spell':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Spell of this Spell.  # noqa: E501
        :rtype: Spell
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Spell.


        :return: The name of this Spell.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Spell.


        :param name: The name of this Spell.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def level(self) -> int:
        """Gets the level of this Spell.


        :return: The level of this Spell.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level: int):
        """Sets the level of this Spell.


        :param level: The level of this Spell.
        :type level: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def school(self) -> str:
        """Gets the school of this Spell.


        :return: The school of this Spell.
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school: str):
        """Sets the school of this Spell.


        :param school: The school of this Spell.
        :type school: str
        """
        if school is None:
            raise ValueError("Invalid value for `school`, must not be `None`")  # noqa: E501

        self._school = school

    @property
    def casting_time(self) -> str:
        """Gets the casting_time of this Spell.


        :return: The casting_time of this Spell.
        :rtype: str
        """
        return self._casting_time

    @casting_time.setter
    def casting_time(self, casting_time: str):
        """Sets the casting_time of this Spell.


        :param casting_time: The casting_time of this Spell.
        :type casting_time: str
        """
        if casting_time is None:
            raise ValueError("Invalid value for `casting_time`, must not be `None`")  # noqa: E501

        self._casting_time = casting_time

    @property
    def range(self) -> str:
        """Gets the range of this Spell.


        :return: The range of this Spell.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range: str):
        """Sets the range of this Spell.


        :param range: The range of this Spell.
        :type range: str
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range

    @property
    def components(self) -> str:
        """Gets the components of this Spell.


        :return: The components of this Spell.
        :rtype: str
        """
        return self._components

    @components.setter
    def components(self, components: str):
        """Sets the components of this Spell.


        :param components: The components of this Spell.
        :type components: str
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501

        self._components = components

    @property
    def duration(self) -> str:
        """Gets the duration of this Spell.


        :return: The duration of this Spell.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration: str):
        """Sets the duration of this Spell.


        :param duration: The duration of this Spell.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def description(self) -> str:
        """Gets the description of this Spell.


        :return: The description of this Spell.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Spell.


        :param description: The description of this Spell.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description
